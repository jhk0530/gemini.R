[{"path":"https://github.com/jhk0530/gemini.R/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Jinhwan Kim Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/jhk0530/gemini.R/articles/audio_understanding.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Audio Understand","text":"can use sample audio file pixabay Note, gemini_audio use “Describe audio” default prompt.","code":"library(gemini.R) gemini_audio(audio = \"helloworld.mp3\")  # text # \"The audio contains a clear, crisp recording of a person saying \\\"Hello\\\". # Following the phrase is a distinct, repeated percussive sound, possibly a rhythmic # tapping or clicking noise. The sound is consistent and mechanical in nature.\\n\""},{"path":"https://github.com/jhk0530/gemini.R/articles/document_understanding.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Document Understand","text":"Use example pdf documents link & link2 (Arxiv)","code":"gemini_docs(   c(\"doc1.pdf\", \"doc2.pdf\"),   prompt = \"Summarize each document separately.\" )  # text # \"Here's a summary of the provided documents, separated by document. \\n\\n # **Document 1: GeoAdjust: Adjus ting for Positional Uncertainty in Geostatistical Analysis of DHS Data**\\n\\n # ... # **Document 2: SIHR: Statistical Inference in High-D imensional Linear and Logistic Regression Models**\\n\\n # ..."},{"path":"https://github.com/jhk0530/gemini.R/articles/gemini-R.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal","title":"Get Started","text":"goal gemini.R make easy use Google’s Gemini API R.","code":""},{"path":"https://github.com/jhk0530/gemini.R/articles/gemini-R.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick Start","title":"Get Started","text":"use Gemini API, need create save API key Google AI Studio. Gemini API offers free paid plans. recommended use setAPI function securely save use Gemini API key environment.","code":"library(gemini.R) setAPI(\"YOUR_API_KEY\") gemini(\"Explain about the gemini in astrology in one line\")  # text # \"Gemini, the third astrological sign, is associated with # communication, adaptability, and a thirst for knowledge.\""},{"path":"https://github.com/jhk0530/gemini.R/articles/gemini-R.html","id":"features","dir":"Articles","previous_headings":"","what":"Features","title":"Get Started","text":"functions provided gemini.R based Gemini API documentation. gemini.R primarily implements features Gemini API, additional support Vertex AI features. feature yet implemented mentioned, currently planned gemini.R. features Gemini API included, important ones prioritized. Text generation Image generation Image description Audio description Document understand (PDF) Multi-turn conversation (Chat) Vertex token management Google search Model garden Generate narrative (Table) Gemma Generate roxygen2 Generate testthat","code":""},{"path":"https://github.com/jhk0530/gemini.R/articles/gemini-R.html","id":"basic","dir":"Articles","previous_headings":"","what":"Basic","title":"Get Started","text":"Text generation Image generation Image description","code":""},{"path":"https://github.com/jhk0530/gemini.R/articles/gemini-R.html","id":"advanced","dir":"Articles","previous_headings":"","what":"Advanced","title":"Get Started","text":"Audio description Document understand (PDF) Multi-turn conversation (Chat) Vertex token management Google search Model garden Generate narrative (Table) Gemma","code":""},{"path":"https://github.com/jhk0530/gemini.R/articles/gemini-R.html","id":"rstudio-addins","dir":"Articles","previous_headings":"","what":"Rstudio Addins","title":"Get Started","text":"Generate roxygen2 Generate testthat","code":""},{"path":"https://github.com/jhk0530/gemini.R/articles/google-search.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Use web search","text":"can use gemini_search get recent information google. gemini_searchR deprecated","code":"library(gemini.R) gemini_search('What is the current Apple stock price?')  # text # \"As of today, September 1, 2025, the current price of Apple (AAPL) stock is $232.14. It has decreased by -0.18% in the  # past 24 hours.\\n\\nOther details regarding Apple's stock:\\n*   **Market Cap:** $3.45T\\n*   **Open Price:** $232.55\\n*    # **Day's High:** $233.38\\n*   **Day's Low:** $231.37\\n*   **52-Week High:** $260.10 (reached on Dec 25, 2024)\\n*    # **52-Week Low:** $169.21\\n\""},{"path":"https://github.com/jhk0530/gemini.R/articles/image_generation.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Image Generation","text":"gen_image function deprecated 0.17.0. gemini.R use nano_banana default image generation function.","code":"library(gemini.R)  prompt <- \"Create a picture of a nano banana dish in a fancy restaurant with a Gemini theme\" nano_banana(prompt, output_path = \"gemini-native-image.png\")"},{"path":"https://github.com/jhk0530/gemini.R/articles/image_generation.html","id":"edit-image","dir":"Articles","previous_headings":"","what":"Edit Image","title":"Image Generation","text":"Edit Image require image file prompt guide edit.","code":"prompt <- \"Create a picture of my cat eating a nano-banana in a fancy restaurant under the Gemini constellation\" nano_banana(prompt, type = \"edit\", img_path = \"gemini-native-image.png\", output_path = \"edited_image.png\")"},{"path":"https://github.com/jhk0530/gemini.R/articles/image_generation.html","id":"transfer-image","dir":"Articles","previous_headings":"","what":"Transfer Image","title":"Image Generation","text":"Transfer Image require 2 image files prompt guide. Use images","code":"prompt <- \"Take the blue floral dress from the first image and let the woman from the second image wear it.\" nano_banana(prompt, type = \"transfer\", img_path = \"dress.png\", img_path2 = \"model.png\", output_path = \"transferred_image.png\")"},{"path":"https://github.com/jhk0530/gemini.R/articles/image_understanding.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Image Understanding","text":"Use image . Note, gemini_image use “Explain image” default prompt.","code":"library(gemini.R) gemini_image(image = \"image-understand.png\")  # text # \" The image shows a table with a white tablecloth. On the table are two cups of coffee, # a bowl of blueberries, and five scones. The scones are covered in blueberries and have # a crumbly texture. There are also some pink flowers on the table. The background is a # dark blue color. The image is taken from a top-down perspective.\""},{"path":"https://github.com/jhk0530/gemini.R/articles/image_understanding.html","id":"shiny-application","dir":"Articles","previous_headings":"","what":"Shiny application","title":"Image Understanding","text":"Use fileInput function read image file user.","code":"library(shiny)  ui <- fluidPage(     titlePanel(\"Image Understand with gemini_image\"),     sidebarLayout(         sidebarPanel(             fileInput(\"img\", \"Choose an image file\", accept = c('image/png', 'image/jpeg')),             textInput(\"prompt\", \"Prompt (optional)\", value = \"Explain this image\"),             actionButton(\"ab\", \"Describe Image\")         ),         mainPanel(             imageOutput(\"img_display\"),             verbatimTextOutput(\"to\")         )     ) )  server <- function(input, output, session) {     output$img_display <- renderImage({         req(input$img)         list(src = input$img$datapath, contentType = input$img$type, width = \"80%\")     }, deleteFile = FALSE)      observeEvent(input$ab, {         req(input$img)                 res <- gemini_image(image = input$img$datapath, prompt = input$prompt)         output$to <- renderText({             res         })     }) }  shinyApp(ui, server)"},{"path":"https://github.com/jhk0530/gemini.R/articles/rstudio-addin.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Use RStudio Addins","text":"gemini.R supports features within RStudio make function document Roxygen  make unit testing code testthat  Note , feature considered use VS Code Positron","code":""},{"path":"https://github.com/jhk0530/gemini.R/articles/vertex-ai.html","id":"json-token","dir":"Articles","previous_headings":"","what":"JSON Token","title":"Use Vertex AI","text":"use Vertex AI, must download JSON token. structure : , make token object token.vertex function: token object basically list object key url. model, remove gemini-. example: gemini-2.5-flash provided 2.5-flash function Vertex AI format .vertex basic functions.","code":"{   \"type\": \"service_account\",   \"project_id\": \"***\",   \"private_key_id\": \"***\",   \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n*****\\n-----END PRIVATE KEY-----\\n\",   \"client_email\": \"***\",   \"client_id\": \"***\",   \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",   \"token_uri\": \"https://oauth2.googleapis.com/token\",   \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",   \"client_x509_cert_url\": \"***\",   \"universe_domain\": \"googleapis.com\" } tokens <- token.vertex(jsonkey = \"YOURAPIKEY.json\", model_id = \"2.5-flash\")"},{"path":"https://github.com/jhk0530/gemini.R/articles/vertex-ai.html","id":"text-generation","dir":"Articles","previous_headings":"","what":"Text generation","title":"Use Vertex AI","text":"Use gemini.vertex function","code":"prompt <- \"What is sachins Jersey number?\" gemini.vertex(prompt, tokens)  # text                                           # \"Sachin Tendulkar's jersey number was **10**.\""},{"path":"https://github.com/jhk0530/gemini.R/articles/vertex-ai.html","id":"image-understanding","dir":"Articles","previous_headings":"","what":"Image understanding","title":"Use Vertex AI","text":"Use gemini_image.vertex function","code":"gemini_image.vertex(image = \"dawn.png\", tokens)  # text  # \"Based on the original image and the provided crops,  # here is a detailed explanation of the image:\\n\\n # This is a heartwarming and cozy photograph of a large,  # plump cat sleeping soundly inside a cardboard box. # \\n\\n**The Cat:**\\n*   # ..."},{"path":"https://github.com/jhk0530/gemini.R/articles/vertex-ai.html","id":"audio-understanding","dir":"Articles","previous_headings":"","what":"Audio understanding","title":"Use Vertex AI","text":"Use gemini_audio.vertex function File upload Google Cloud (using API) supported. Instead must use uploaded file. (e.g. Google Cloud Storage) Example sound soundbible","code":"gemini_audio.vertex(audio = \"http://soundbible.com/grab.php?id=2218&type=mp3\", tokens)  # text # \"The audio clip consists of a series of short, repetitive beeping sounds.  # The beep s are relatively high-pitched and have a slightly metallic  # quality. They occur at a consistent rate, creating a rhythmic pattern.  # The sound could be from a variety of sources, such as a device  # notification, a game alert, or a simple electronic de vice. \\n\""},{"path":"https://github.com/jhk0530/gemini.R/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jinhwan Kim. Author, maintainer, copyright holder. Maciej Nasinski. Contributor.","code":""},{"path":"https://github.com/jhk0530/gemini.R/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kim J (2025). gemini.R: Interface 'Google Gemini' API. R package version 0.17.1, https://github.com/jhk0530/gemini.R.","code":"@Manual{,   title = {gemini.R: Interface for 'Google Gemini' API},   author = {Jinhwan Kim},   year = {2025},   note = {R package version 0.17.1},   url = {https://github.com/jhk0530/gemini.R}, }"},{"path":"https://github.com/jhk0530/gemini.R/index.html","id":"geminir","dir":"","previous_headings":"","what":"Interface for Google Gemini API","title":"Interface for Google Gemini API","text":"R package use Google’s gemini via API R","code":""},{"path":"https://github.com/jhk0530/gemini.R/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interface for Google Gemini API","text":"","code":"install.packages(\"gemini.R\") # CRAN # install.packages(\"pak\") pak::pak(\"jhk0530/gemini.R\") # GitHub"},{"path":"https://github.com/jhk0530/gemini.R/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Interface for Google Gemini API","text":"","code":"library(gemini.R) setAPI(\"YOUR_API_KEY\") gemini(\"Explain about the gemini in astrology in one line\")  # text # \"Gemini, the third astrological sign, is associated with # communication, adaptability, and a thirst for knowledge.\""},{"path":"https://github.com/jhk0530/gemini.R/index.html","id":"terms","dir":"","previous_headings":"","what":"Terms","title":"Interface for Google Gemini API","text":"using API, please review following terms: Google Cloud Platform Terms Service Gemini API Additional Terms Service Additional terms conditions may apply. applications using API must comply Google’s Terms Service.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/addHistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Add history for chating context — addHistory","title":"Add history for chating context — addHistory","text":"Add history chating context","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/addHistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add history for chating context — addHistory","text":"","code":"addHistory(history, role = NULL, item = NULL)"},{"path":"https://github.com/jhk0530/gemini.R/reference/addHistory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add history for chating context — addHistory","text":"history history chat role role chat: \"user\" \"model\" item item chat: \"prompt\" \"output\"","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/addHistory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add history for chating context — addHistory","text":"history chat","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/add_inline_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Add inline image data to Gemini API body — add_inline_data","title":"Add inline image data to Gemini API body — add_inline_data","text":"Appends inline_data part (image) Gemini API request body.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/add_inline_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add inline image data to Gemini API body — add_inline_data","text":"","code":"add_inline_data(body, mime_type, data)"},{"path":"https://github.com/jhk0530/gemini.R/reference/add_inline_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add inline image data to Gemini API body — add_inline_data","text":"body list representing current Gemini API request body. mime_type Character. MIME type image (e.g., \"image/png\"). data Character. base64-encoded image data.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/add_inline_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add inline image data to Gemini API body — add_inline_data","text":"updated body list inline image data added.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/add_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Add text prompt to Gemini API body — add_text","title":"Add text prompt to Gemini API body — add_text","text":"Appends text prompt part Gemini API request body.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/add_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add text prompt to Gemini API body — add_text","text":"","code":"add_text(body, prompt)"},{"path":"https://github.com/jhk0530/gemini.R/reference/add_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add text prompt to Gemini API body — add_text","text":"body list representing current Gemini API request body. prompt Character. text prompt add.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/add_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add text prompt to Gemini API body — add_text","text":"updated body list text prompt added.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/countTokens.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Tokens for Gemini Content (Including Images) — countTokens","title":"Count Tokens for Gemini Content (Including Images) — countTokens","text":"Calculates token count given content, including text image data, using Vertex AI Gemini API.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/countTokens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Tokens for Gemini Content (Including Images) — countTokens","text":"","code":"countTokens(   jsonkey = NULL,   model_id = NULL,   content = NULL,   region = \"us-central1\" )"},{"path":"https://github.com/jhk0530/gemini.R/reference/countTokens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Tokens for Gemini Content (Including Images) — countTokens","text":"jsonkey path JSON file containing service account key Vertex AI. model_id ID Gemini model. content content (text, image, list text/image parts) count tokens. text, provide string. images, provide list data (base64 encoded image) mimeType (e.g., \"image/png\", \"image/jpeg\"). multiple content parts, provide list element either text string image list. region Google Cloud region Vertex AI resources located (default \"us-central1\"). See https://cloud.google.com/vertex-ai/docs/regions available regions.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/countTokens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Tokens for Gemini Content (Including Images) — countTokens","text":"numeric value representing token count content.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/countTokens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Tokens for Gemini Content (Including Images) — countTokens","text":"","code":"if (FALSE) { # \\dontrun{ library(gemini.R)  # For text content key_file <- \"YOURAPIKEY.json\" model <- \"2.0-flash\" token_count_text <- countTokens(   jsonkey = key_file,   model_id = model,   content = \"Hello, world!\" ) print(token_count_text)  # For image content (assuming 'image.jpg' is in your working directory) image_data <- base64enc::base64encode(\"image.jpg\") image_content <- list(data = image_data, mimeType = \"image/jpeg\") token_count_image <- countTokens(   jsonkey = key_file,   model_id = model,   content = image_content ) print(token_count_image)  # For multiple content parts (text and image) content_parts <- list(   list(text = \"This is the first part.\"),   list(data = image_data, mimeType = \"image/jpeg\"),   list(text = \"This is the last part\") ) token_count_parts <- countTokens(   jsonkey = key_file,   model_id = model,   content = content_parts ) print(token_count_parts) } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text from text with Gemini — gemini","title":"Generate text from text with Gemini — gemini","text":"Generate text text Gemini","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text from text with Gemini — gemini","text":"","code":"gemini(   prompt,   model = \"2.0-flash\",   temperature = 1,   maxOutputTokens = 8192,   topK = 40,   topP = 0.95,   seed = 1234,   timeout = 60 )"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text from text with Gemini — gemini","text":"prompt prompt generate text model model use. Default '2.0-flash'. see https://ai.google.dev/gemini-api/docs/models/gemini temperature temperature use. Default 1 value 0 2 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters maxOutputTokens maximum number tokens generate. Default 8192 100 tokens correspond roughly 60-80 words. topK top-k value use. Default 40 value 0 100 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters topP top-p value use. Default 0.95 value 0 1 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters seed seed use. Default 1234 value integer see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters timeout Request timeout seconds. Default 60.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text from text with Gemini — gemini","text":"Generated text image","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate text from text with Gemini — gemini","text":"","code":"if (FALSE) { # \\dontrun{ library(gemini.R) setAPI(\"YOUR_API_KEY\") gemini(\"Explain dplyr's mutate function\") } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini.vertex.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text from text with Gemini Vertex API — gemini.vertex","title":"Generate text from text with Gemini Vertex API — gemini.vertex","text":"Generate text text Gemini Vertex API","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini.vertex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text from text with Gemini Vertex API — gemini.vertex","text":"","code":"gemini.vertex(   prompt = NULL,   tokens = NULL,   temperature = 1,   maxOutputTokens = 8192,   topK = 40,   topP = 0.95,   seed = 1234,   timeout = 60,   labels = NULL )"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini.vertex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text from text with Gemini Vertex API — gemini.vertex","text":"prompt character string containing prompt Gemini model. tokens list containing API URL key token.vertex() function. temperature temperature use. Default 1 value 0 2 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters maxOutputTokens maximum number tokens generate. Default 8192 100 tokens correspond roughly 60-80 words. topK top-k value use. Default 40 value 0 100 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters topP top-p value use. Default 0.95 value 0 1 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters seed seed use. Default 1234 value integer see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters timeout Request timeout seconds. Default 60. labels (Optional) named list custom metadata labels. Example: list(team = \"research\", env = \"test\").","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini.vertex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text from text with Gemini Vertex API — gemini.vertex","text":"character string containing generated text.","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini.vertex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate text from text with Gemini Vertex API — gemini.vertex","text":"","code":"if (FALSE) { # \\dontrun{ # token should be created before this. using the token.vertex() function prompt <- \"What is sachins Jersey number?\" gemini.vertex(prompt, tokens) gemini.vertex(prompt, tokens, labels = list(team = \"research\", env = \"test\")) } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_audio.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze audio using Gemini — gemini_audio","title":"Analyze audio using Gemini — gemini_audio","text":"function sends audio Gemini API returns text description.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_audio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze audio using Gemini — gemini_audio","text":"","code":"gemini_audio(   audio = NULL,   prompt = \"Describe this audio\",   model = \"2.0-flash\",   temperature = 1,   maxOutputTokens = 8192,   topK = 40,   topP = 0.95,   seed = 1234 )"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_audio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze audio using Gemini — gemini_audio","text":"audio Path audio file (default: uses sample file). Must MP3. prompt string describing audio. model model use. Options \"2.0-flash\", \"2.0-flash-lite\", \"2.5-pro-exp-03-25\". Default '2.0-flash' see https://ai.google.dev/gemini-api/docs/models/gemini temperature temperature use. Default 1 value 0 2 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters maxOutputTokens maximum number tokens generate. Default 8192 100 tokens correspond roughly 60-80 words. topK top-k value use. Default 40 value 0 100 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters topP top-p value use. Default 0.95 value 0 1 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters seed seed use. Default 1234 value integer see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_audio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze audio using Gemini — gemini_audio","text":"character vector containing Gemini API's response.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_audio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze audio using Gemini — gemini_audio","text":"API key now sent via HTTP header x-goog-api-key instead URL query parameter.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_audio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze audio using Gemini — gemini_audio","text":"","code":"if (FALSE) { # \\dontrun{ library(gemini.R) setAPI(\"YOUR_API_KEY\") gemini_audio(audio = \"YOUR_AUDIO_FILE\") } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_audio.vertex.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze Audio using Gemini Vertex API — gemini_audio.vertex","title":"Analyze Audio using Gemini Vertex API — gemini_audio.vertex","text":"function sends audio Gemini API returns text description.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_audio.vertex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze Audio using Gemini Vertex API — gemini_audio.vertex","text":"","code":"gemini_audio.vertex(   audio = NULL,   prompt = \"Describe this audio\",   tokens = NULL,   temperature = 1,   maxOutputTokens = 8192,   topK = 40,   topP = 0.95,   seed = 1234 )"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_audio.vertex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze Audio using Gemini Vertex API — gemini_audio.vertex","text":"audio Path audio file (character string). supports \"mp3\". prompt prompt guide Gemini API's analysis (character string, defaults \"Describe audio\"). tokens list containing API URL key token.vertex() function. temperature temperature use. Default 1 value 0 2 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters maxOutputTokens maximum number tokens generate. Default 8192 100 tokens correspond roughly 60-80 words. topK top-k value use. Default 40 value 0 100 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters topP top-p value use. Default 0.95 value 0 1 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters seed seed use. Default 1234 value integer see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_audio.vertex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze Audio using Gemini Vertex API — gemini_audio.vertex","text":"character vector containing Gemini API's description audio.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_chat.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-turn conversations (chat) — gemini_chat","title":"Multi-turn conversations (chat) — gemini_chat","text":"Generate text text Gemini","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_chat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-turn conversations (chat) — gemini_chat","text":"","code":"gemini_chat(   prompt,   history = list(),   model = \"2.0-flash\",   temperature = 1,   maxOutputTokens = 8192,   topK = 40,   topP = 0.95,   seed = 1234 )"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_chat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-turn conversations (chat) — gemini_chat","text":"prompt prompt generate text history history object keep track conversation model model use. Options \"2.0-flash\", \"2.0-flash-lite\", \"2.5-pro-exp-03-25\". Default '2.0-flash' see https://ai.google.dev/gemini-api/docs/models/gemini temperature temperature use. Default 1 value 0 2 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters maxOutputTokens maximum number tokens generate. Default 8192 100 tokens correspond roughly 60-80 words. topK top-k value use. Default 40 value 0 100 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters topP top-p value use. Default 0.95 value 0 1 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters seed seed use. Default 1234 value integer see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_chat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi-turn conversations (chat) — gemini_chat","text":"Generated text","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_chat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi-turn conversations (chat) — gemini_chat","text":"","code":"if (FALSE) { # \\dontrun{ library(gemini.R) setAPI(\"YOUR_API_KEY\")  chats <- gemini_chat(\"Pretend you're a snowman and stay in character for each\") print(chats$outputs)  chats <- gemini_chat(\"What's your favorite season of the year?\", chats$history) print(chats$outputs)  chats <- gemini_chat(\"How do you think about summer?\", chats$history) print(chats$outputs) } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize or analyze one or more local documents using Gemini API — gemini_docs","title":"Summarize or analyze one or more local documents using Gemini API — gemini_docs","text":"Summarize, compare, analyze content one local documents (PDF, TXT, HTML, etc.) using Gemini API.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_docs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize or analyze one or more local documents using Gemini API — gemini_docs","text":"","code":"gemini_docs(   pdf_path,   prompt,   type = \"PDF\",   model = \"2.5-flash\",   api_key = Sys.getenv(\"GEMINI_API_KEY\"),   large = FALSE,   local = FALSE )"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_docs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize or analyze one or more local documents using Gemini API — gemini_docs","text":"pdf_path Path(s) local file(s). Can character vector. prompt prompt send Gemini (e.g., \"Summarize documents\"). type File type. One \"PDF\", \"JavaScript\", \"Python\", \"TXT\", \"HTML\", \"CSS\", \"Markdown\", \"CSV\", \"XML\", \"RTF\". Default \"PDF\". model model use. Default '2.5-flash'. see https://ai.google.dev/gemini-api/docs/models/gemini api_key Gemini API key. Defaults Sys.getenv(\"GEMINI_API_KEY\"). API key sent via HTTP header x-goog-api-key. large Logical. TRUE, use file upload API large files (one file supported). Default FALSE. local Logical. TRUE, treat pdf_path local file path. FALSE, download URL. Default FALSE.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_docs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize or analyze one or more local documents using Gemini API — gemini_docs","text":"summary response text Gemini.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_docs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize or analyze one or more local documents using Gemini API — gemini_docs","text":"function encodes one local files, sends along prompt Gemini API, returns generated summary response.","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_docs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize or analyze one or more local documents using Gemini API — gemini_docs","text":"","code":"if (FALSE) { # \\dontrun{ gemini_docs(   pdf_path = c(\"doc1.pdf\", \"doc2.pdf\"),   prompt = \"Compare these documents\",   type = \"PDF\",   model = \"2.5-flash\" ) } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_docs.vertex.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize or analyze documents using Vertex AI Gemini — gemini_docs.vertex","title":"Summarize or analyze documents using Vertex AI Gemini — gemini_docs.vertex","text":"Summarize, compare, analyze content one documents (PDF, TXT, HTML, etc.) using Vertex AI Gemini.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_docs.vertex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize or analyze documents using Vertex AI Gemini — gemini_docs.vertex","text":"","code":"gemini_docs.vertex(   file_uri,   prompt,   mime_type = \"application/pdf\",   tokens = NULL,   temperature = 1,   maxOutputTokens = 8192,   topK = 40,   topP = 0.95,   seed = 1234 )"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_docs.vertex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize or analyze documents using Vertex AI Gemini — gemini_docs.vertex","text":"file_uri URI(s) URL(s) file(s) include prompt. Accepts Cloud Storage URI (gs://...), HTTP(S) URL, YouTube video URL. prompt text instructions include prompt. mime_type media type file (e.g., \"application/pdf\", \"text/plain\"). tokens list containing API URL key token.vertex() function. temperature temperature use. Default 1. maxOutputTokens maximum number tokens generate. Default 8192. topK top-k value use. Default 40. topP top-p value use. Default 0.95. seed seed use. Default 1234.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_docs.vertex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize or analyze documents using Vertex AI Gemini — gemini_docs.vertex","text":"summary response text Gemini Vertex.","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_docs.vertex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize or analyze documents using Vertex AI Gemini — gemini_docs.vertex","text":"","code":"if (FALSE) { # \\dontrun{ tokens <- token.vertex() gemini_docs.vertex(   file_uri = \"gs://cloud-samples-data/generative-ai/pdf/2403.05530.pdf\",   prompt = \"Summarize this document.\",   mime_type = \"application/pdf\",   tokens = tokens ) } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_garden.html","id":null,"dir":"Reference","previous_headings":"","what":"Interact with Vertex AI Model Garden — gemini_garden","title":"Interact with Vertex AI Model Garden — gemini_garden","text":"function sends PDF file Vertex AI Model Garden (Mistral model) processing, OCR. PDF encoded base64 sent rawPredict endpoint. function designed future extension support document types tasks.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_garden.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interact with Vertex AI Model Garden — gemini_garden","text":"","code":"gemini_garden(token, project_id, pdf_path)"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_garden.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interact with Vertex AI Model Garden — gemini_garden","text":"token Token object (e.g., token.vertex()) containing access token, region, model_id. project_id Google Cloud project ID. pdf_path Path PDF file processed.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_garden.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interact with Vertex AI Model Garden — gemini_garden","text":"parsed list containing results Vertex AI API (e.g., OCR results).","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_garden.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interact with Vertex AI Model Garden — gemini_garden","text":"PDF file read encoded base64, sent Vertex AI rawPredict endpoint processing using Mistral model. function structured future extension support document types model tasks available Vertex AI Model Garden. information available models, endpoints, supported tasks, see Vertex AI Model Garden documentation.","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_garden.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interact with Vertex AI Model Garden — gemini_garden","text":"","code":"if (FALSE) { # \\dontrun{ # Issue a token using token.vertex() first my_token <- token.vertex(   jsonkey = \"your-service-account.json\",   region = \"us-central1\",   model_id = \"mistral-ocr-2505\" ) result <- gemini_garden(   token = my_token,   project_id = \"your-project-id\",   pdf_path = \"sample.pdf\" ) print(result) } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text from text and image with Gemini — gemini_image","title":"Generate text from text and image with Gemini — gemini_image","text":"Generate text text image Gemini","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text from text and image with Gemini — gemini_image","text":"","code":"gemini_image(   image = NULL,   prompt = \"Explain this image\",   model = \"2.0-flash\",   temperature = 1,   maxOutputTokens = 8192,   topK = 40,   topP = 0.95,   seed = 1234,   type = \"png\" )"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text from text and image with Gemini — gemini_image","text":"image image generate text prompt prompt generate text, Default \"Explain image\" model model use. Options \"2.0-flash\", \"2.0-flash-lite\", \"2.5-pro-exp-03-25\". Default '2.0-flash' see https://ai.google.dev/gemini-api/docs/models/gemini temperature temperature use. Default 1 value 0 2 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters maxOutputTokens maximum number tokens generate. Default 8192 100 tokens correspond roughly 60-80 words. topK top-k value use. Default 40 value 0 100 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters topP top-p value use. Default 0.95 value 0 1 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters seed seed use. Default 1234 value integer see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters type type image. Options 'png', 'jpeg', 'webp', 'heic', 'heif'. Default 'png'","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text from text and image with Gemini — gemini_image","text":"Generated text","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_image.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate text from text and image with Gemini — gemini_image","text":"API key now sent via x-goog-api-key HTTP header instead URL query parameter.","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate text from text and image with Gemini — gemini_image","text":"","code":"if (FALSE) { # \\dontrun{ library(gemini.R) setAPI(\"YOUR_API_KEY\") gemini_image(image = system.file(\"docs/reference/figures/image.png\", package = \"gemini.R\")) } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_image.vertex.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text from text and image with Gemini Vertex API — gemini_image.vertex","title":"Generate text from text and image with Gemini Vertex API — gemini_image.vertex","text":"Generate text text image Gemini Vertex API","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_image.vertex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text from text and image with Gemini Vertex API — gemini_image.vertex","text":"","code":"gemini_image.vertex(   image = NULL,   prompt = \"Explain this image\",   type = \"png\",   tokens = NULL,   temperature = 1,   maxOutputTokens = 8192,   topK = 40,   topP = 0.95,   seed = 1234 )"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_image.vertex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text from text and image with Gemini Vertex API — gemini_image.vertex","text":"image image generate text prompt character string specifying prompt use image. Defaults \"Explain image\". type character string specifying image type (\"png\", \"jpeg\", \"webp\", \"heic\", \"heif\"). Defaults \"png\". tokens list containing API URL key token.vertex() function. temperature temperature use. Default 1 value 0 2 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters maxOutputTokens maximum number tokens generate. Default 8192 100 tokens correspond roughly 60-80 words. topK top-k value use. Default 40 value 0 100 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters topP top-p value use. Default 0.95 value 0 1 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters seed seed use. Default 1234 value integer see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_image.vertex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text from text and image with Gemini Vertex API — gemini_image.vertex","text":"character vector containing Gemini's description image.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_narrative.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate narrative description for an input using Gemini — gemini_narrative","title":"Generate narrative description for an input using Gemini — gemini_narrative","text":"Generate narrative description given input (e.g., table, figure) converting suitable format sending Gemini.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_narrative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate narrative description for an input using Gemini — gemini_narrative","text":"","code":"gemini_narrative(input, type = \"table\", prompt = NULL, ...)"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_narrative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate narrative description for an input using Gemini — gemini_narrative","text":"input Input object. type = \"table\", data.frame provided. type Type input. Default \"table\". (e.g., \"table\", \"figure\") prompt Optional prompt string guide narrative generation. NULL, default prompt used. ... Additional arguments passed gemini()","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_narrative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate narrative description for an input using Gemini — gemini_narrative","text":"Narrative description generated Gemini","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_narrative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate narrative description for an input using Gemini — gemini_narrative","text":"","code":"if (FALSE) { # \\dontrun{ # Example data.frame table_data <- data.frame(   sort = c(1, 1, 2, 2, 2, 3, 3, 3, 4, 4),   category = c(     \"Gender\", \"Gender\", \"Age Group\", \"Age Group\", \"Age Group\",     \"Race\", \"Race\", \"Race\", \"Ethnicity\", \"Ethnicity\"   ),   type = c(     \"F\", \"M\", \"<65\", \">80\", \"65-80\",     \"AMERICAN INDIAN OR ALASKA NATIVE\", \"BLACK OR AFRICAN AMERICAN\", \"WHITE\",     \"HISPANIC OR LATINO\", \"NOT HISPANIC OR LATINO\"   ),   Placebo = c(53, 33, 14, 30, 42, NA, 8, 78, 3, 83),   Xanomeline_High_Dose = c(40, 44, 11, 18, 55, 1, 9, 74, 3, 81),   Xanomeline_Low_Dose = c(50, 34, 8, 29, 47, NA, 6, 78, 6, 78),   stringsAsFactors = FALSE # Do not convert strings to factors ) gemini_narrative(table_data) } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Send POST request to Gemini API — gemini_request","title":"Send POST request to Gemini API — gemini_request","text":"Sends POST request Gemini API specified URL body, returns response character string.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send POST request to Gemini API — gemini_request","text":"","code":"gemini_request(url, body)"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send POST request to Gemini API — gemini_request","text":"url Character. Gemini API endpoint URL. body List. request body send JSON.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send POST request to Gemini API — gemini_request","text":"Character string containing API response.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send POST request to Gemini API — gemini_request","text":"","code":"if (FALSE) { # \\dontrun{ body <- list(contents = list(list(parts = list(list(text = \"Hello!\"))))) gemini_request(   paste0(\"https://generativelanguage.googleapis.com/v1beta/models/\",      \"gemini-2.5-flash-image-preview:generateContent\"), body) } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text with real-time information using Google Search (Grounding) — gemini_search","title":"Generate text with real-time information using Google Search (Grounding) — gemini_search","text":"Generate text responses include --date information Google Search","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text with real-time information using Google Search (Grounding) — gemini_search","text":"","code":"gemini_search(   prompt,   temperature = 1,   maxOutputTokens = 8192,   topK = 40,   topP = 0.95,   seed = 1234 )"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text with real-time information using Google Search (Grounding) — gemini_search","text":"prompt prompt question requiring real-time information temperature temperature use. Default 1 value 0 2 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters maxOutputTokens maximum number tokens generate. Default 8192 100 tokens correspond roughly 60-80 words. topK top-k value use. Default 40 value 0 100 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters topP top-p value use. Default 0.95 value 0 1 see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters seed seed use. Default 1234 value integer see https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text with real-time information using Google Search (Grounding) — gemini_search","text":"Generated text real-time information Google Search","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate text with real-time information using Google Search (Grounding) — gemini_search","text":"API key now sent via HTTP header x-goog-api-key instead URL query parameter.","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate text with real-time information using Google Search (Grounding) — gemini_search","text":"","code":"if (FALSE) { # \\dontrun{ library(gemini.R) setAPI(\"YOUR_API_KEY\") gemini_search(\"What is the current Google stock price?\") } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_structured.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate structured response from Gemini — gemini_structured","title":"Generate structured response from Gemini — gemini_structured","text":"Returns structured (JSON) response Gemini API.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_structured.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate structured response from Gemini — gemini_structured","text":"","code":"gemini_structured(   prompt,   schema,   model = \"2.5-flash\",   temperature = 1,   maxOutputTokens = 8192,   topK = 40,   topP = 0.95,   seed = 1234,   timeout = 60 )"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_structured.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate structured response from Gemini — gemini_structured","text":"prompt prompt (question) send model. schema JSON schema (list) expected response. model Model use. Default '2.5-flash'. temperature Sampling temperature. Default 1. maxOutputTokens Maximum number output tokens. Default 8192. topK Top-k value. Default 40. topP Top-p value. Default 0.95. seed Random seed. Default 1234. timeout Request timeout seconds. Default 60.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_structured.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate structured response from Gemini — gemini_structured","text":"structured list (parsed JSON).","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemini_structured.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate structured response from Gemini — gemini_structured","text":"","code":"if (FALSE) { # \\dontrun{ schema <- list(   type = \"ARRAY\",   items = list(     type = \"OBJECT\",     properties = list(       recipeName = list(type = \"STRING\"),       ingredients = list(         type = \"ARRAY\",         items = list(type = \"STRING\")       )     ),     propertyOrdering = c(\"recipeName\", \"ingredients\")   ) ) gemini_structured(   \"List a few popular cookie recipes, and include the amounts of ingredients.\",   schema ) } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemma.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text from text with Gemma — gemma","title":"Generate text from text with Gemma — gemma","text":"Generate text text Gemma Gemini API","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text from text with Gemma — gemma","text":"","code":"gemma(prompt, model = \"gemma-3-1b-it\", api_key = NULL, timeout = 60)"},{"path":"https://github.com/jhk0530/gemini.R/reference/gemma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text from text with Gemma — gemma","text":"prompt prompt generate text model model use. Default 'gemma-3-1b-'. see https://ai.google.dev/gemma/docs/get_started#models-list api_key API key. NULL, uses GEMINI_API_KEY environment variable. timeout Request timeout seconds. Default 60.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text from text with Gemma — gemma","text":"Generated text","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gemma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate text from text with Gemma — gemma","text":"","code":"if (FALSE) { # \\dontrun{ gemma(\"Roses are red...\") } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gen_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Roxygen Documentation — gen_docs","title":"Generate Roxygen Documentation — gen_docs","text":"Generates Roxygen2 documentation R function based currently selected code.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gen_docs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Roxygen Documentation — gen_docs","text":"","code":"gen_docs(prompt = NULL)"},{"path":"https://github.com/jhk0530/gemini.R/reference/gen_docs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Roxygen Documentation — gen_docs","text":"prompt character string specifying additional instructions LLM.  Defaults prompt requesting Roxygen2 documentation without original code.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gen_docs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Roxygen Documentation — gen_docs","text":"Invisibly returns generated documentation string, primarily inserts text RStudio console.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gen_docs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Roxygen Documentation — gen_docs","text":"","code":"if (FALSE) { # \\dontrun{ # Select your function code in the editor, then run: gen_docs()  # For custom instructions: gen_docs(\"Generate minimal Roxygen docs for this function\") } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/gen_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Unit Tests for R Functions — gen_tests","title":"Generate Unit Tests for R Functions — gen_tests","text":"Generates unit test code R function using Gemini AI model.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gen_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Unit Tests for R Functions — gen_tests","text":"","code":"gen_tests(prompt = NULL)"},{"path":"https://github.com/jhk0530/gemini.R/reference/gen_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Unit Tests for R Functions — gen_tests","text":"prompt character string specifying additional instructions Gemini model. NULL, default prompt requesting unit tests used.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gen_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Unit Tests for R Functions — gen_tests","text":"Invisibly returns generated test code, primarily inserts RStudio console.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/gen_tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Unit Tests for R Functions — gen_tests","text":"","code":"if (FALSE) { # \\dontrun{ # Select your function code in the editor, then run: gen_tests()  # For custom instructions: gen_tests(\"Generate comprehensive testthat tests with edge cases\") } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/init_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Gemini API request body — init_body","title":"Initialize Gemini API request body — init_body","text":"Creates empty body structure Gemini API requests.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/init_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Gemini API request body — init_body","text":"","code":"init_body()"},{"path":"https://github.com/jhk0530/gemini.R/reference/init_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Gemini API request body — init_body","text":"list representing empty Gemini API request body.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/nano_banana.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate, edit, or transfer images using Gemini API — nano_banana","title":"Generate, edit, or transfer images using Gemini API — nano_banana","text":"Generate new image, edit existing image, transfer styles/content two images using Gemini API (aka Nano Banana). function supports image generation text, image editing prompt base image, image transfer two images.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/nano_banana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate, edit, or transfer images using Gemini API — nano_banana","text":"","code":"nano_banana(   prompt,   type = \"generate\",   img_path = NULL,   img_path2 = NULL,   output_path )"},{"path":"https://github.com/jhk0530/gemini.R/reference/nano_banana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate, edit, or transfer images using Gemini API — nano_banana","text":"prompt Character. prompt describing image generate edit. type Character. type operation: \"generate\" (text--image), \"edit\" (image editing), \"transfer\" (image--image). img_path Character. Path input image PNG file. img_path2 Character. Path second input image PNG file. output_path Character. filename save result image.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/nano_banana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate, edit, or transfer images using Gemini API — nano_banana","text":"path saved image file, NULL error occurred.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/nano_banana.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate, edit, or transfer images using Gemini API — nano_banana","text":"","code":"if (FALSE) { # \\dontrun{ # Generate an image from text prompt <- \"Create a picture of a nano banana dish in a fancy restaurant with a Gemini theme\" nano_banana(prompt, output_path = \"gemini-native-image.png\")  # Edit an image with a prompt (continued from generate) prompt <- paste(   \"Create a picture of my cat eating a nano-banana\",   \"in a restaurant under the Gemini constellation\" ) nano_banana(   prompt,   type = \"edit\",   img_path = \"gemini-native-image.png\",   output_path = \"edited_image.png\" )  # Transfer style/content between two images prompt <- paste(   \"Take the blue floral dress from the first image\",   \"and let the woman from the second image wear it.\" ) nano_banana(   prompt,   type = \"transfer\",   img_path = \"dress.png\",   img_path2 = \"model.png\",   output_path = \"transferred_image.png\" ) } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/read_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and encode image file as base64 — read_image","title":"Read and encode image file as base64 — read_image","text":"Reads image file given path encodes base64 string. Used internally Gemini API image upload.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/read_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and encode image file as base64 — read_image","text":"","code":"read_image(img_path)"},{"path":"https://github.com/jhk0530/gemini.R/reference/read_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and encode image file as base64 — read_image","text":"img_path Path image file.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/read_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and encode image file as base64 — read_image","text":"Base64-encoded string image, NULL file exist.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/read_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and encode image file as base64 — read_image","text":"","code":"if (FALSE) { # \\dontrun{ base64_img <- read_image(\"cat.png\") } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/save_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and save image from Gemini API response — save_image","title":"Extract and save image from Gemini API response — save_image","text":"Extracts base64-encoded image data Gemini API response text saves binary image file.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/save_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and save image from Gemini API response — save_image","text":"","code":"save_image(res_txt, output_path)"},{"path":"https://github.com/jhk0530/gemini.R/reference/save_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and save image from Gemini API response — save_image","text":"res_txt Character string. raw response text Gemini API. output_path Character string. file path save decoded image.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/save_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and save image from Gemini API response — save_image","text":"path saved image file, NULL image data found.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/save_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and save image from Gemini API response — save_image","text":"","code":"if (FALSE) { # \\dontrun{ save_image(res_txt, \"output.png\") } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/setAPI.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Gemini API Key — setAPI","title":"Set Gemini API Key — setAPI","text":"Sets Gemini API key environment variable use API calls.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/setAPI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Gemini API Key — setAPI","text":"","code":"setAPI(api_key)"},{"path":"https://github.com/jhk0530/gemini.R/reference/setAPI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Gemini API Key — setAPI","text":"api_key character string containing Gemini API key.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/setAPI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Gemini API Key — setAPI","text":"return value, called side effects.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/setAPI.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set Gemini API Key — setAPI","text":"Please aware agree terms service API provider. app uses API key subject terms service. Also, please aware API key sensitive information.","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/reference/setAPI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Gemini API Key — setAPI","text":"","code":"if (FALSE) { # \\dontrun{ setAPI(\"YOUR_API_KEY\") } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/setEnv.html","id":null,"dir":"Reference","previous_headings":"","what":"Store API key in local environment file — setEnv","title":"Store API key in local environment file — setEnv","text":"Saves API key local .Renviron file persistent access across R sessions","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/setEnv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store API key in local environment file — setEnv","text":"","code":"setEnv(api_key, overwrite = TRUE, install_message = TRUE)"},{"path":"https://github.com/jhk0530/gemini.R/reference/setEnv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store API key in local environment file — setEnv","text":"api_key API key store overwrite Whether overwrite existing API key already present .Renviron (default: TRUE) install_message Whether display message use API (default: TRUE)","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/setEnv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store API key in local environment file — setEnv","text":"return value, called side effects.","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/reference/setEnv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store API key in local environment file — setEnv","text":"","code":"if (FALSE) { # \\dontrun{ setEnv(\"your_api_key\") } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/token.vertex.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Gemini Access Token and Endpoint URL — token.vertex","title":"Generate Gemini Access Token and Endpoint URL — token.vertex","text":"Generates access token Gemini model constructs corresponding endpoint URL.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/token.vertex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Gemini Access Token and Endpoint URL — token.vertex","text":"","code":"token.vertex(   jsonkey = NULL,   model_id = NULL,   expTime = 3600,   region = \"us-central1\" )"},{"path":"https://github.com/jhk0530/gemini.R/reference/token.vertex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Gemini Access Token and Endpoint URL — token.vertex","text":"jsonkey path JSON file containing service account key Vertex AI. model_id ID Gemini model. prepended \"gemini-\". expTime expiration time access token seconds (default 3600 seconds, 1 hour). region Google Cloud region Vertex AI resources located (default \"us-central1\"). See https://cloud.google.com/vertex-ai/docs/general/locations available regions.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/token.vertex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Gemini Access Token and Endpoint URL — token.vertex","text":"list containing: key generated access token. url endpoint URL Gemini model.","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/token.vertex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Gemini Access Token and Endpoint URL — token.vertex","text":"","code":"if (FALSE) { # \\dontrun{ library(gemini.R) tokens <- token.vertex(jsonkey = \"YOURAPIKEY.json\", model_id = \"2.5-flash\")  # Specify a different region tokens <- token.vertex(jsonkey = \"YOURAPIKEY.json\", model_id = \"2.5-flash\", region = \"europe-west4\") } # }"},{"path":"https://github.com/jhk0530/gemini.R/reference/trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim whitespace from string — trim","title":"Trim whitespace from string — trim","text":"Removes leading trailing whitespace string","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim whitespace from string — trim","text":"","code":"trim(x)"},{"path":"https://github.com/jhk0530/gemini.R/reference/trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim whitespace from string — trim","text":"x Character string trim","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/trim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim whitespace from string — trim","text":"Character string leading trailing whitespace removed","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/validate_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Gemini API parameters — validate_params","title":"Validate Gemini API parameters — validate_params","text":"Helper function validate parameters Gemini API calls","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/validate_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Gemini API parameters — validate_params","text":"","code":"validate_params(   prompt,   model,   temperature = 1,   topP = 0.95,   topK = 40,   seed = 1234,   api_key = TRUE,   tokens = NULL )"},{"path":"https://github.com/jhk0530/gemini.R/reference/validate_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Gemini API parameters — validate_params","text":"prompt prompt text validate model model name validate temperature temperature value validate topP topP value validate topK topK value validate seed seed value validate api_key Whether check API key (TRUE/FALSE) tokens tokens object vertex API (optional, provide NULL applicable)","code":""},{"path":"https://github.com/jhk0530/gemini.R/reference/validate_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Gemini API parameters — validate_params","text":"TRUE validations pass, otherwise function stops execution error message","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_0171-0-17-0","dir":"Changelog","previous_headings":"","what":"0.17.1","title":"gemini.R 0.17.0","text":"gen_image deprecated, use nano_banana. gemini_searchR deprecated. See Added documents gemini.R package. Updated hexsticker","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_0170-0-17-0","dir":"Changelog","previous_headings":"","what":"0.17.0","title":"gemini.R 0.17.0","text":"Added nano_banana image generation.","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_0160-0-17-0","dir":"Changelog","previous_headings":"","what":"0.16.0","title":"gemini.R 0.17.0","text":"API key transmission updated improved security compatibility. Previously, API key sent URL query parameter (e.g., ?key=YOUR_API_KEY). Now, functions send API key using HTTP header x-goog-api-key, following Google Gemini API best practices. change enhances security future compatibility. Users can continue set API key using setAPI(“YOUR_API_KEY”). change user-facing function interfaces. old method passing API key URL parameter longer supported.","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_0150-0-17-0","dir":"Changelog","previous_headings":"","what":"0.15.0","title":"gemini.R 0.17.0","text":"Added gemini_narrative table description Added gemini_structured structured API responses","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_0141-0-17-0","dir":"Changelog","previous_headings":"","what":"0.14.1","title":"gemini.R 0.17.0","text":"Added gemini_docs Add reading PDF Added timeout parameter gemini, gemini.vertex.","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_0130-0-17-0","dir":"Changelog","previous_headings":"","what":"0.13.0","title":"gemini.R 0.17.0","text":"Relaxed model parameter validation support newly released models like gemini-2.5-flash-preview-04-17 Enhanced error handling across functions improved stability Standardized response processing across API functions Updated documentation reflect expanded model compatibility","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_0120-0-17-0","dir":"Changelog","previous_headings":"","what":"0.12.0","title":"gemini.R 0.17.0","text":"Added Gemini searching gemini_search ground using gemini-2.0 models Added Gemini searching gemini_searchR retrive using gemini-1.5 models","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_0110-0-17-0","dir":"Changelog","previous_headings":"","what":"0.11.0","title":"gemini.R 0.17.0","text":"Added Gemini 2.5-pro-exp model (2.5-pro-exp-03-25) Deprecated Gemini 2.0-pro-exp model (2.0-pro-exp-02-05) Now image generation possible gen_image() using 2.0-flash-exp-image-generation model.","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_0100-0-17-0","dir":"Changelog","previous_headings":"","what":"0.10.0","title":"gemini.R 0.17.0","text":"countTokens function countTokens API setEnv function added. Deprecated Gemini 1.5 models (1.5-pro, 1.5-flash) Add CRANlogs badge readme","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_092-0-17-0","dir":"Changelog","previous_headings":"","what":"0.9.2","title":"gemini.R 0.17.0","text":"Modified .Rbuildignore ignore README.md","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_091-0-17-0","dir":"Changelog","previous_headings":"","what":"0.9.1","title":"gemini.R 0.17.0","text":"Add roxygen documents region","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_090-0-17-0","dir":"Changelog","previous_headings":"","what":"0.9.0","title":"gemini.R 0.17.0","text":"Updated parameters across functions (temperature, maxOutputTokens, topK, topP, seed) Adjusted default values: temperature 1 maxOutputTokens 8192, model 2.0-flash","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_081-0-17-0","dir":"Changelog","previous_headings":"","what":"0.8.1","title":"gemini.R 0.17.0","text":"requires region user Vertex AI API","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_080-0-17-0","dir":"Changelog","previous_headings":"","what":"0.8.0","title":"gemini.R 0.17.0","text":"Add Vertex AI new functions: token.vertex(), gemini.vertex(), gemini_image.vertex(), gemini_audio.vertex() functions experimental stage may change future versions.","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_070-0-17-0","dir":"Changelog","previous_headings":"","what":"0.7.0","title":"gemini.R 0.17.0","text":"Generate unit test using gen_test() added. gemini_audio supports mp3. gemini.R supports 2.0-flash-exp model.","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_061-0-17-0","dir":"Changelog","previous_headings":"","what":"0.6.1","title":"gemini.R 0.17.0","text":"Generate roxygen gen_docs() added. terms improved.","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_050-0-17-0","dir":"Changelog","previous_headings":"","what":"0.5.0","title":"gemini.R 0.17.0","text":"gemini.R supports 1.5=flash model. gemini functions require temperature, maxTokenOutput","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_040-0-17-0","dir":"Changelog","previous_headings":"","what":"0.4.0","title":"gemini.R 0.17.0","text":"Updated use httr2 setAPI now shows last 4 words API key confirmation. cat updated using cli better readability console. gemini_image() takes default prompt “Explain image” example image flower. See ?gemini_image","code":""},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"id_030-0-17-0","dir":"Changelog","previous_headings":"","what":"0.3.0","title":"gemini.R 0.17.0","text":"R CMD CHECK longer shows NOTEs WARNINGs. use R-hub check multiple platforms github action","code":""},{"path":[]},{"path":"https://github.com/jhk0530/gemini.R/news/index.html","id":"whats-changed-0-17-0","dir":"Changelog","previous_headings":"0.2.0","what":"What’s changed","title":"gemini.R 0.17.0","text":"Added Multi-turn conversation Chat 💬. See gemini_chat Slight change function documentation. Now generates message inform setAPI API key exist yet.","code":""}]
